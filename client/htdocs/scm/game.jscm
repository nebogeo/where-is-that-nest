;; -*- mode: scheme; -*-
; ------------------------------------------------
;; Copyright (C) 2013 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(console.log "hello")

(define easy-filenames
  (map
   (lambda (f) (string-append "easy/" f))
   (list
    "ChTr002.jpg" "ChTr003.jpg" "ChTr004.jpg" "CuTe001-2013.jpg" "CuTe001.jpg"
    "CuTe002.jpg" "CuTe003.jpg" "CuTe004.jpg" "CuTe005.jpg" "CuTe006.jpg" "CuTe007.jpg"
    "CuTe009.jpg" "CuTe010.jpg" "RC002.jpg" "RC005-2013.jpg" "RC007.jpg" "RC013.jpg"
    "RC014.jpg" "RC015.jpg" "RC016_2ndegg.jpg" "RC016.jpg" "RC017.jpg" "VC001-2013.jpg"
    "VC001.jpg" "VC001-SA2013.jpg" "VC002-2013.jpg" "VC002.jpg" "VC003.jpg" "VC004-2013.jpg"
    "VC004.jpg" "VC005.jpg" "VC008.jpg" "VC009.jpg" "VC010.jpg" "VC011.jpg" "VC012.jpg"
    "VC013.jpg" "VC014.jpg" "VC015-2013.jpg" "VC015.jpg" "VC017.jpg" "VC021.jpg"
    "VC023.jpg" "VC025.jpg" "VC030.jpg" "VC031.jpg" "VC032.jpg" "VC033.jpg"
    "VC034.jpg" "VS001.jpg" "VS002.jpg" "VS003-2013.jpg" "VS003.jpg")))

(define hard-filenames
  (map
   (lambda (f) (string-append "hard/" f))
   (list
    "ChMa002.jpg" "ChMa003.jpg" "ChMa004.jpg" "ChMa006.jpg" "ChMa007.jpg" "ChMa008.jpg"
    "ChPa001.jpg" "ChPa003.jpg" "RC001-2013.jpg" "RC001.jpg" "RC003-2013.jpg"
    "RC003_2ndegg.jpg" "RC003.jpg" "RC004-2013.jpg" "RC004.jpg" "RC005.jpg" "RC006.jpg"
    "RC008.jpg" "RC009.jpg" "RC010.jpg" "RC011.jpg" "RC020.jpg" "VA003-SA2013.jpg"
    "VC003-2013.jpg" "VC005-2013.jpg" "VC006-2013.jpg" "VC006.jpg" "VC009-2013.jpg"
    "VC010-2013.jpg" "VC011-2013.jpg" "VC012-2013.jpg" "VC013-2013.jpg" "VC022.jpg"
    "VC026.jpg" "VC027.jpg" "VC037.jpg" "VS001-2013.jpg")))

(define filenames (easy-filenames.concat hard-filenames))


;(set! filenames
;      (filenames.concat
;       (map
;        (lambda (fn)
;          (+ "mongoose-" fn))
;        filenames)))

(define photos
  (map
   (lambda (fn)
     (+ "photos/" fn))
   filenames))

(define (feather)
  (choose (list "feather1.png" "feather2.png" "feather3.png")))

(define (nightjar-example file pos width height)
  (list file pos width height))

(define (nightjar-example-file n) (list-ref n 0))
(define (nightjar-example-pos n) (list-ref n 1))
(define (nightjar-example-width n) (list-ref n 2))
(define (nightjar-example-height n) (list-ref n 3))

;; get from image structure
(define image-width 2474)
(define image-height 1640)
(define image-centre-x (/ image-width 2))
(define image-centre-y (/ image-height 2))

(define positions
  (map
   (lambda (i)
     (list
      (* (list-ref i 0) 0.5)
      (* (list-ref i 1) 0.5)
      (* (list-ref i 2) 0.5)
      (* (list-ref i 3) 0.5)))
   (list
    (list 2400 1601 157 121)
   (list 2354 1668 164 108)
   (list 2427 1502 154 106)
   (list 2403 1609 213 104)
   (list 2324 1504 240 136)
   (list 2513 1593 198 108)
   (list 2425 1755 142 107)
   (list 2358 1547 218 129)
   (list 2383 1592 192 136)
   (list 2378 1518 119 140)
   (list 2389 1585 161 91)
   (list 2308 1711 143 127)
   (list 2399 1530 205 148)
   (list 2454 1484 151 137)
   (list 2356 1449 266 144)
   (list 2293 1546 299 163)
   (list 2354 1731 174 98)
   (list 2321 1593 278 126)
   (list 2353 1479 252 156)
   (list 2315 1651 267 125)
   (list 2419 1712 227 123)
   (list 2328 1495 295 158)
   (list 2329 1617 309 120)
   (list 2343 1581 268 120)
   (list 2350 1640 179 117)
   (list 2354 1573 251 101)
   (list 2315 1614 290 159)
   (list 2258 1582 311 162)
   (list 2356 1591 249 118)
   (list 2414 1583 264 126)
   (list 2382 1593 227 148)
   (list 2346 1614 274 103)
   (list 2461 1494 181 117)
   (list 2338 1577 246 109)
   (list 2305 1654 279 115)
   (list 2318 1588 284 111)
   (list 2388 1582 254 95)
   (list 2320 1636 266 125)
   (list 2327 1563 281 141)
   (list 2350 1533 236 143)
   (list 2331 1596 252 110)
   (list 2381 1495 289 124)
   (list 2328 1604 276 121)
   (list 2330 1658 280 127)
   (list 2348 1681 291 117)
   (list 2427 1646 142 125)
   (list 2288 1599 274 113)
   (list 2302 1611 244 161)
   (list 2286 1578 311 172)
   (list 2217 1588 420 185)
   (list 2269 1565 428 188)
   (list 2298 1532 350 129)
   (list 2303 1535 319 166)

   (list 2382 1621 183 123)
   (list 2371 1593 170 128)
   (list 2365 1641 220 98)
   (list 2375 1569 195 92)
   (list 2407 1613 237 88)
   (list 2411 1701 225 89)
   (list 2459 1604 164 128)
   (list 2406 1515 129 108)
   (list 2333 1556 277 134)
   (list 2379 1498 158 144)
   (list 2415 1589 172 136)
   (list 2242 1629 258 120)
   (list 2437 1517 291 153)
   (list 2299 1578 281 125)
   (list 2307 1613 298 151)
   (list 2347 1498 292 194)
   (list 2445 1546 228 113)
   (list 2304 1668 255 128)
   (list 2350 1574 253 107)
   (list 2350 1695 216 126)
   (list 2399 1712 150 84)
   (list 2494 1695 267 136)
   (list 2329 1775 158 78)
   (list 2360 1620 254 111)
   (list 2472 1617 277 100)
   (list 2366 1514 247 98)
   (list 2288 1588 288 101)
   (list 2353 1715 257 138)
   (list 2382 1690 133 92)
   (list 2366 1643 167 79)
   (list 2335 1612 177 111)
   (list 2344 1531 255 105)
   (list 2333 1637 336 122)
   (list 2364 1679 237 95)
   (list 2370 1645 266 101)
   (list 2329 1564 241 106)
   (list 2293 1611 347 116))))


(define (build-examples n)
  (cond
   ((zero? n) ())
   (else
    (let ((pos (list-ref positions (modulo n (length positions)))))
      (cons
       (nightjar-example
        (list-ref photos n)
        (list (list-ref pos 0) (list-ref pos 1))
        (list-ref pos 2)
        (list-ref pos 3))
       (build-examples (- n 1)))))))

(define nightjar-examples (build-examples (- (length photos) 1)))

(define safe-x 0.2)
(define safe-y 0.2)

(define (generate-image-pos)
  (list (- (* screen-width (+ safe-x (* (rndf) (- 1 (* safe-x 2))))) image-centre-x)
        (- (* screen-height (+ safe-y (* (rndf) (- 1 (* safe-y 2))))) image-centre-y)))

(define default-button-x (- (/ screen-width 2) 280))
(define default-button-y (+ (/ screen-height 2) 20))
(define button-gap 250)
(define game-time-allowed 30)

(define (empty-nightjar-data)
  (list 0 0 0 "" #f 0 () () 0 (sprite 0 0 "wrong.png" 0)))

(define (nightjar-start-time g) (list-ref g 0))
(define (nightjar-modify-start-time v g) (list-replace g 0 v))
(define (nightjar-photo-time g) (list-ref g 1))
(define (nightjar-modify-photo-time v g) (list-replace g 1 v))
(define (nightjar-player-id g) (list-ref g 2))
(define (nightjar-modify-player-id v g) (list-replace g 2 v))
(define (nightjar-player-type g) (list-ref g 3))
(define (nightjar-modify-player-type v g) (list-replace g 3 v))
(define (nightjar-played-before g) (list-ref g 4))
(define (nightjar-modify-played-before v g) (list-replace g 4 v))
(define (nightjar-player-age g) (list-ref g 5))
(define (nightjar-modify-player-age v g) (list-replace g 5 v))
(define (nightjar-images g) (list-ref g 6))
(define (nightjar-modify-images v g) (list-replace g 6 v))
(define (nightjar-image-pos g) (list-ref g 7))
(define (nightjar-modify-image-pos v g) (list-replace g 7 v))
(define (nightjar-score g) (list-ref g 8))
(define (nightjar-modify-score v g) (list-replace g 8 v))
(define (nightjar-sprite g) (list-ref g 9))
(define (nightjar-modify-sprite v g) (list-replace g 9 v))

(define (nightjar-heading ctx txt)
  (set! ctx.fillStyle "#000")
  (set! ctx.font "normal 75pt stefanie")
  (ctx.save)
  (ctx.translate 4 4)
  (wrap-text ctx txt 100 200 1000 100)
  (ctx.restore)
  (set! ctx.fillStyle "#fff")
  (set! ctx.font "normal 75pt stefanie")
  (wrap-text ctx txt 100 200 1000 100))


(define (nightjar-text ctx txt)
  (set! ctx.font "bold 25pt gnuolane")
  (wrap-text ctx txt 100 400 1000 50))

(define (nightjar-all-text ctx txt)
  (set! ctx.font "bold 50pt gnuolane")
  (wrap-text ctx txt 100 200 1000 75))

(define (time-left c)
  (* (- (game-time c)
        (nightjar-start-time (game-data c)))
     0.001))

(define (stroke-clock ctx c x y)
  (ctx.beginPath)
  (ctx.moveTo x y)
  (ctx.arc
   x y 50 (* Math.PI -0.5)
   (+ (* Math.PI -0.5)
      (/ (* (time-left c) Math.PI 2) game-time-allowed))
   true)
  (ctx.closePath))

(define (nightjar-draw-clock ctx c)
  (set! ctx.lineWidth 4)
  (set! ctx.strokeStyle "#000")
  (stroke-clock ctx c 74 74)
  (ctx.stroke)

  (stroke-clock ctx c 70 70)
  (set! ctx.fillStyle "rgba(1, 0, 0, 0.7)")
  (ctx.fill)
  (set! ctx.lineWidth 4)
  (set! ctx.strokeStyle "#f00")
  (ctx.stroke)

  (set! ctx.lineWidth 1)
  (set! ctx.fillStyle "#fff")
  (set! ctx.font "normal 30pt gnuolane")
  (ctx.fillText (Math.floor (- game-time-allowed (time-left c))) 54 110))

(define (nightjar-new-game c)
  (nightjar-game
   (game-modify-data
    (lambda (d)
      (nightjar-modify-start-time
       (game-time c) d))
    (game-modify-data
     (lambda (d)
       (nightjar-modify-image-pos
        (generate-image-pos)
        (nightjar-modify-sprite
         (sprite -999 -999 "right.png" 0)
         d)))
     c))))

(define (nightjar-new-game-reset-timer n c)
  (load-image-mutate
   (lambda (c)
     (nightjar-new-game
      (game-modify-data
       (lambda (d)
         (nightjar-modify-images
          (cdr (nightjar-images d))
          (nightjar-modify-photo-time
           (game-time c) d)))
       c)))
   (nightjar-example-file (list-ref (nightjar-images (game-data c)) n)))
  (game-modify-buttons
   ()
   (game-modify-render
    (lambda (ctx)
      (let ((example (car (nightjar-images (game-data c)))))
        (ctx.drawImage
         (find-image (nightjar-example-file example) image-lib)
         (car (nightjar-image-pos (game-data c)))
         (cadr (nightjar-image-pos (game-data c))))
        (nightjar-all-text ctx "Loading your next nest...")))
    c)))

(define (nightjar-new-game-images c)
  (define start 0)
  (when (eq? (nightjar-player-type (game-data c)) "monkey")
        (set! start 40))
  (play-sound "sound/button.wav")

  (let ((images (crop (shuffle (slice nightjar-examples start 39)) 20)))
    (load-image-mutate
     (lambda (c)
       (nightjar-new-game
        (game-modify-data
         (lambda (d)
           (nightjar-modify-photo-time
            (game-time c)
            (nightjar-modify-images images d)))
         c)))
     (nightjar-example-file (list-ref images 0)))
    (game-modify-buttons
     ()
     (game-modify-render
      (lambda (ctx)
        (nightjar-all-text ctx "Loading your first nest..."))
        c))))

(define (nightjar-intro c)
  (let ((icon-x 150)
        (icon-y (+ default-button-y 100)))
  (game-modify-data
   (lambda (d)
     (empty-nightjar-data))
   (game-modify-render
    (lambda (ctx)
      (nightjar-heading ctx "Where is that nest?")
      (nightjar-text ctx "Spot eggs and help us with our research")
      (set! ctx.globalAlpha 0.8)
      (set! ctx.fillStyle "#ffffff")
      (ctx.fillRect 0 (+ icon-y 180) 1500 100)
      (set! ctx.globalAlpha 1))

    (game-modify-buttons
     (list
      (image-button
       "Start playing"
       default-button-x
       default-button-y
       #t
       (feather)
       (lambda (c)
         (play-sound "sound/button.wav")
         (nightjar-experiment-screen c)))

      (image-button
       "Back to site" 10 (- icon-y 20) #f "back.png"
       (lambda (c)
         (play-sound "sound/button.wav")
         (set! window.location "http://nightjar.exeter.ac.uk/story/games")
         c))


      (image-button
       "" (+ icon-x 50) (+ icon-y 190) #f "sensory-ecology.png"
       (lambda (c)
         (play-sound "sound/button.wav")
         (set! window.location "http://www.sensoryecology.com/")
         c))

      (image-button
       "" (+ icon-x 200) (+ icon-y 200) #f "exeter.png"
       (lambda (c)
         (play-sound "sound/button.wav")
         (set! window.location "http://www.exeter.ac.uk/")
         c))

      (image-button
       "" (+ icon-x 400) (+ icon-y 200) #f "cu.png"
       (lambda (c)
         (play-sound "sound/button.wav")
         (set! window.location "http://www.zoo.cam.ac.uk/")
         c))

      (image-button
       "" (+ icon-x 600) (+ icon-y 200) #f "bbsrc.png"
       (lambda (c)
         (play-sound "sound/button.wav")
         (set! window.location "http://www.bbsrc.ac.uk/")
         c))

      (image-button
       "" (+ icon-x 850) (+ icon-y 205) #f "foam.png"
       (lambda (c)
         (play-sound "sound/button.wav")
         (set! window.location "http://fo.am")
         c))



      )
     c)))))

(define (nightjar-experiment-screen c)
  (game-modify-render
   (lambda (ctx)
     (nightjar-all-text ctx "We would like to use results from your game for a scientific publication, is that ok?")
     (set! ctx.font "bold 30pt gnuolane")
     (wrap-text ctx "We are using age and timing information" 100 450 1000 75))

   (game-modify-buttons
    (list

     (image-button
      "Yes that's fine"
      (+ default-button-x button-gap)
      (+ default-button-y 100)
      #t
      (feather)
      (lambda (c)
        (play-sound "sound/button.wav")
        (nightjar-age-screen c)))

     (image-button
      "Back"
      (- default-button-x button-gap)
      (+ default-button-y 100)
      #t
      (feather)
      (lambda (c)
        (play-sound "sound/button.wav")
        (nightjar-intro c))))
    c)))

(define (nightjar-age-screen c)
  (game-modify-render
   (lambda (ctx)
     (nightjar-all-text ctx "What is your age?"))
   (game-modify-buttons
    (let ((age-but
           (lambda (title id)
             (image-button
              title
              default-button-x
              (+ 150 (* id 130))
              #t
              (feather)
              (lambda (c)
                (play-sound "sound/button.wav")
                (game-modify-data
                 (lambda (d)
                   (nightjar-modify-player-age
                    id d))
                 (nightjar-played-before-screen c)))))))

      (list
       (age-but "Younger than 10" 1)
       (age-but "10 to 15" 2)
       (age-but "16 to 35" 3)
       (age-but "36 to 50" 4)
       (age-but "Older than 50" 5))
     )
    c)))


(define (nightjar-played-before-screen c)
  (game-modify-render
   (lambda (ctx)
     (nightjar-all-text
      ctx
      (+ "Have you played this game before?")))
   (game-modify-buttons
    (list

     (image-button
      "Yes"
      (+ default-button-x button-gap)
      default-button-y
      #t
      (feather)
      (lambda (c)
        (play-sound "sound/button.wav")
        (nightjar-species-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-played-before #t d))
          c))))

     (image-button
      "No"
      (- default-button-x button-gap)
      default-button-y
      #t
      (feather)
      (lambda (c)
        (play-sound "sound/button.wav")
        (nightjar-species-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-played-before #f d))
          c))))
    ) c)))

(define (nightjar-species-screen c)
  (game-modify-render
   (lambda (ctx)
     (nightjar-all-text ctx "What predator species would you like to be?")
     (set! ctx.font "bold 30pt gnuolane")
     (wrap-text ctx "They see the world differently..." 100 400 1000 75))

   (game-modify-buttons
    (list

     (image-button
      "Monkey"
      (+ default-button-x button-gap)
      default-button-y
      #t
      (feather)
      (lambda (c)
        (play-sound "sound/button.wav")
        (nightjar-explain-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-player-type "monkey" d))
          c))))

     (image-button
      "Mongoose"
      (- default-button-x button-gap)
      default-button-y
      #t
      (feather)
      (lambda (c)
        (play-sound "sound/button.wav")
        (nightjar-explain-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-player-type "mongoose" d))
          c))))
    ) c)))


(define (get-n-items lst num)
  (cond
   ((null? lst) ())
   ((zero? num) ())
   (else (cons (car lst) (get-n-items (cdr lst) (- num 1))))))

(define (slice lst start count)
  (if (> start 1)
      (slice (cdr lst) (- start 1) count)
      (get-n-items lst count)))

(define (nightjar-explain-screen c)
  (game-modify-render
   (lambda (ctx)
     (ctx.drawImage (find-image "nightjar.jpg" image-lib) 250 200)
     (set! ctx.font "bold 50pt gnuolane")
     (wrap-text ctx "There is one nest hidden in every photo, touch it as soon as you see it" 100 100 1000 75))
   (game-modify-buttons
    (list

     (image-button
      "Start playing"
      default-button-x
      (+ default-button-y 300)
      #t
      (feather)
      (lambda (c)
        (server-call-mutate
         "player"
         (list
          (list "species" (nightjar-player-type (game-data c)))
          (list "played_before" (nightjar-played-before (game-data c)))
          (list "age_range" (nightjar-player-age (game-data c))))
         (lambda (game data)
           (let ((id (car (JSON.parse data))))
             ;;(alert id)
             (game-modify-data
              (lambda (d)
                (nightjar-modify-player-id id d))
              game))))
        (nightjar-new-game-images c))))

    c)))

(define (record-click c success)
  (server-call
   "click"
   (list
    (list "player_id" (nightjar-player-id (game-data c)))
    (list "photo_name" (nightjar-example-file (car (nightjar-images (game-data c)))))
    (list "photo_offset_x" (car (nightjar-image-pos (game-data c))))
    (list "photo_offset_y" (cadr (nightjar-image-pos (game-data c))))
    (list "time_stamp" (- (game-time c) (nightjar-photo-time (game-data c))))
    (list "x_position" (game-mx c))
    (list "y_position" (game-my c))
    (list "success" success))))


(define (nightjar-game c)
  ;; todo: choose and delete

  (define example (car (nightjar-images (game-data c))))

  (game-modify-render
   (lambda (ctx)
     (ctx.drawImage
      (find-image (nightjar-example-file example) image-lib)
      (car (nightjar-image-pos (game-data c)))
      (cadr (nightjar-image-pos (game-data c))))
     (sprite-render
      ctx
      (game-time c)
      (nightjar-sprite (game-data c)))

     (nightjar-draw-clock ctx c)

     )

   (game-modify-update
    (lambda (t c)
      (if (> (- (game-time c)
                (nightjar-start-time (game-data c)))
             (* game-time-allowed 1000))
          (nightjar-fail "You'll go hungry tonight!" c)
          c))

    (game-modify-buttons
     (list

      (image-button
       "I give up"
       (- screen-width 150)
       (- screen-height 150)
       #f
       "quit.png"
       (lambda (c)
         (nightjar-fail "You'll go hungry tonight!" c)))

      ;; button over nightjar
      (rect-button
       ""
       (+ (car (nightjar-example-pos example))
          (car (nightjar-image-pos (game-data c))))

       (+ (cadr (nightjar-example-pos example))
          (cadr (nightjar-image-pos (game-data c))))

       (nightjar-example-width example)
       (nightjar-example-height example)
       #f
       (lambda (c)
         (play-sound "sound/found.wav")
         (nightjar-win
          (game-modify-data
           (lambda (d)
             (record-click c 1)
             (nightjar-modify-sprite
              (sprite (- (game-mx c) 126)
                      (- (game-my c) 105)
                      "right.png" (+ (game-time c) 2000))
              (nightjar-modify-score
               (- (game-time c) (nightjar-start-time d)) d)))
           c))))

      ;; big lose button over whole screen
      (rect-button
       ""
       0 0 screen-width screen-height #f
       (lambda (c)
         (play-sound "sound/notfound.wav")
         (game-modify-data
          (lambda (d)
            (record-click c 0)
            (nightjar-modify-sprite
             (sprite (- (game-mx c) 126)
                     (- (game-my c) 105)
                     "wrong.png" (+ (game-time c) 2000)) d))
          c)))

      ) c))))

(define (nightjar-fail reason c)
  (game-modify-render
   (lambda (ctx)
     (define example (car (nightjar-images (game-data c))))

     (ctx.drawImage
      (find-image (nightjar-example-file example) image-lib)
      (car (nightjar-image-pos (game-data c)))
      (cadr (nightjar-image-pos (game-data c))))

     ;; highlight the nightjar
     (set! ctx.strokeStyle "#ffff00")
     (set! ctx.lineWidth 4)
     (ctx.strokeRect
       (+ (car (nightjar-example-pos example))
          (car (nightjar-image-pos (game-data c))))

       (+ (cadr (nightjar-example-pos example))
          (cadr (nightjar-image-pos (game-data c))))

       (nightjar-example-width example)
       (nightjar-example-height example))
     (set! ctx.lineWidth 1)

     (sprite-render
      ctx
      (game-time c)
      (nightjar-sprite (game-data c)))

     (nightjar-all-text ctx reason))

   (game-modify-update
    (lambda (t c) c)

    (game-modify-buttons
     (list

      (image-button
       "Next nest"
       (- default-button-x button-gap)
       (+ default-button-y 50) #t
       (feather)
       (lambda (c)
         (play-sound "sound/button.wav")
         ;; check end of game
         (if (eq? (length (nightjar-images (game-data c))) 1)
             (nightjar-intro c)
             (nightjar-new-game-reset-timer 1 c))))

      (image-button
       "Quit game"
       (+ default-button-x button-gap)
       (+ default-button-y 50) #t
       (feather)
       (lambda (c)
         (play-sound "sound/button.wav")
         ;; check end of game
         (nightjar-get-score c "Thankyou for playing.")))


      ) c))))

(define (nightjar-win c)
  (game-modify-render
   (lambda (ctx)
     (define example (car (nightjar-images (game-data c))))

     (ctx.drawImage
      (find-image (nightjar-example-file example) image-lib)
      (car (nightjar-image-pos (game-data c)))
      (cadr (nightjar-image-pos (game-data c))))

     (sprite-render
      ctx
      (game-time c)
      (nightjar-sprite (game-data c)))

     (let ((done (+ (- 20 (length (nightjar-images (game-data c)))) 1)))
       (nightjar-heading ctx (+ "Nest " done "/20 found in "
                                (/ (nightjar-score (game-data c)) 1000)
                                " seconds"))))

   (game-modify-update
    (lambda (t c) c)

    (game-modify-buttons
     (list
      (image-button
       "Next nest"
       default-button-x
       (+ default-button-y 50) #t
       (feather)
       (lambda (c)
         (play-sound "sound/button.wav")
         ;; check end of game
         (if (eq? (length (nightjar-images (game-data c))) 1)
             (nightjar-get-score c "Well done!")
             (nightjar-new-game-reset-timer 1 c))))
      ) c))))

(define (nightjar-get-score c reason)
  (server-call-mutate
   "score"
   (list
    (list "player_id" (nightjar-player-id (game-data c))))
   (lambda (game data)
     (let ((score (JSON.parse data)))
       (nightjar-finish game
                        (list-ref score 0)
                        (list-ref score 1)
                        (list-ref score 2)
                        reason))))
  c)

(define (score-to-text score)
  (cond
   ((eq? score 1) "1st")
   ((eq? score 2) "2nd")
   ((eq? score 3) "3rd")
   (else (+ score "th"))))

(define (get-score-text score count)
  (if (and (< score 11) (> count 5))
      (+ " You are in the top ten! You are " (score-to-text score))
      " You've not made the top ten..."))

(define (trunc a)
  (/ (Math.floor (* a 100)) 100))

(define (nightjar-finish c av score count reason)
  (game-modify-render
   (lambda (ctx)

     (nightjar-all-text
      ctx (+ reason " Your average nightjar spotting time is " (trunc (/ av 1000)) " seconds."))

     (wrap-text ctx (get-score-text score count) 100 430 1000 75)
     (wrap-text ctx "For more information head to nightjar.exeter.ac.uk" 100 570 1000 75))

   (game-modify-update
    (lambda (t c) c)

    (game-modify-buttons
     (list

      (image-button
       "Back"
       default-button-x
       (+ default-button-y 200)
       #t
       (feather)
       (lambda (c)
         (play-sound "sound/button.wav")
         (nightjar-intro c)))
      ) c))))

(set! ctx.font "normal 75pt gnuolane")
(centre-text ctx "Loading..." 240)

(load-images!
 (list "feather1.png"
       "feather2.png"
       "feather3.png"
       "quit.png"
       "right.png"
       "wrong.png"
       "bbsrc.png"
       "cu.png"
       "exeter.png"
       "foam.png"
       "sensory-ecology.png"
       "back.png"
       "nightjar.jpg")
 (lambda ()
   (start-game canvas ctx)))
